# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ars548_msg/RadarBasicStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class RadarBasicStatus(genpy.Message):
  _md5sum = "cc377b2f8683cdfb9508a75a783d8fba"
  _type = "ars548_msg/RadarBasicStatus"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

float32 Longitudinal
float32 Lateral
float32 Vertical
float32 Yaw
float32 Pitch
uint8 PlugOrientation
float32 Length
float32 Width
float32 Height
float32 Wheelbase
uint16 MaximumDistance
uint8 FrequencySlot
uint8 CycleTime
uint8 TimeSlot
uint8 HCC
uint8 Powersave_Standstill
uint32 SensorIPAddress_0
uint32 SensorIPAddress_1
uint8 Configuration_counter
uint8 Status_LongitudinalVelocity
uint8 Status_LongitudinalAcceleration
uint8 Status_LateralAcceleration
uint8 Status_YawRate
uint8 Status_SteeringAngle
uint8 Status_DrivingDirection
uint8 Status_CharacteristicSpeed
uint8 Status_Radar

uint32 Timestamp_Nanoseconds
uint32 Timestamp_Seconds
uint8 Timestamp_SyncStatus
uint8 SWVersion_Major
uint8 SWVersion_Minor
uint8 SWVersion_Patch

uint8 Status_VoltageStatus
uint8 Status_TemperatureStatus
uint8 Status_BlockageStatus
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','Longitudinal','Lateral','Vertical','Yaw','Pitch','PlugOrientation','Length','Width','Height','Wheelbase','MaximumDistance','FrequencySlot','CycleTime','TimeSlot','HCC','Powersave_Standstill','SensorIPAddress_0','SensorIPAddress_1','Configuration_counter','Status_LongitudinalVelocity','Status_LongitudinalAcceleration','Status_LateralAcceleration','Status_YawRate','Status_SteeringAngle','Status_DrivingDirection','Status_CharacteristicSpeed','Status_Radar','Timestamp_Nanoseconds','Timestamp_Seconds','Timestamp_SyncStatus','SWVersion_Major','SWVersion_Minor','SWVersion_Patch','Status_VoltageStatus','Status_TemperatureStatus','Status_BlockageStatus']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','uint8','float32','float32','float32','float32','uint16','uint8','uint8','uint8','uint8','uint8','uint32','uint32','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint32','uint32','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,Longitudinal,Lateral,Vertical,Yaw,Pitch,PlugOrientation,Length,Width,Height,Wheelbase,MaximumDistance,FrequencySlot,CycleTime,TimeSlot,HCC,Powersave_Standstill,SensorIPAddress_0,SensorIPAddress_1,Configuration_counter,Status_LongitudinalVelocity,Status_LongitudinalAcceleration,Status_LateralAcceleration,Status_YawRate,Status_SteeringAngle,Status_DrivingDirection,Status_CharacteristicSpeed,Status_Radar,Timestamp_Nanoseconds,Timestamp_Seconds,Timestamp_SyncStatus,SWVersion_Major,SWVersion_Minor,SWVersion_Patch,Status_VoltageStatus,Status_TemperatureStatus,Status_BlockageStatus

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarBasicStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Longitudinal is None:
        self.Longitudinal = 0.
      if self.Lateral is None:
        self.Lateral = 0.
      if self.Vertical is None:
        self.Vertical = 0.
      if self.Yaw is None:
        self.Yaw = 0.
      if self.Pitch is None:
        self.Pitch = 0.
      if self.PlugOrientation is None:
        self.PlugOrientation = 0
      if self.Length is None:
        self.Length = 0.
      if self.Width is None:
        self.Width = 0.
      if self.Height is None:
        self.Height = 0.
      if self.Wheelbase is None:
        self.Wheelbase = 0.
      if self.MaximumDistance is None:
        self.MaximumDistance = 0
      if self.FrequencySlot is None:
        self.FrequencySlot = 0
      if self.CycleTime is None:
        self.CycleTime = 0
      if self.TimeSlot is None:
        self.TimeSlot = 0
      if self.HCC is None:
        self.HCC = 0
      if self.Powersave_Standstill is None:
        self.Powersave_Standstill = 0
      if self.SensorIPAddress_0 is None:
        self.SensorIPAddress_0 = 0
      if self.SensorIPAddress_1 is None:
        self.SensorIPAddress_1 = 0
      if self.Configuration_counter is None:
        self.Configuration_counter = 0
      if self.Status_LongitudinalVelocity is None:
        self.Status_LongitudinalVelocity = 0
      if self.Status_LongitudinalAcceleration is None:
        self.Status_LongitudinalAcceleration = 0
      if self.Status_LateralAcceleration is None:
        self.Status_LateralAcceleration = 0
      if self.Status_YawRate is None:
        self.Status_YawRate = 0
      if self.Status_SteeringAngle is None:
        self.Status_SteeringAngle = 0
      if self.Status_DrivingDirection is None:
        self.Status_DrivingDirection = 0
      if self.Status_CharacteristicSpeed is None:
        self.Status_CharacteristicSpeed = 0
      if self.Status_Radar is None:
        self.Status_Radar = 0
      if self.Timestamp_Nanoseconds is None:
        self.Timestamp_Nanoseconds = 0
      if self.Timestamp_Seconds is None:
        self.Timestamp_Seconds = 0
      if self.Timestamp_SyncStatus is None:
        self.Timestamp_SyncStatus = 0
      if self.SWVersion_Major is None:
        self.SWVersion_Major = 0
      if self.SWVersion_Minor is None:
        self.SWVersion_Minor = 0
      if self.SWVersion_Patch is None:
        self.SWVersion_Patch = 0
      if self.Status_VoltageStatus is None:
        self.Status_VoltageStatus = 0
      if self.Status_TemperatureStatus is None:
        self.Status_TemperatureStatus = 0
      if self.Status_BlockageStatus is None:
        self.Status_BlockageStatus = 0
    else:
      self.header = std_msgs.msg.Header()
      self.Longitudinal = 0.
      self.Lateral = 0.
      self.Vertical = 0.
      self.Yaw = 0.
      self.Pitch = 0.
      self.PlugOrientation = 0
      self.Length = 0.
      self.Width = 0.
      self.Height = 0.
      self.Wheelbase = 0.
      self.MaximumDistance = 0
      self.FrequencySlot = 0
      self.CycleTime = 0
      self.TimeSlot = 0
      self.HCC = 0
      self.Powersave_Standstill = 0
      self.SensorIPAddress_0 = 0
      self.SensorIPAddress_1 = 0
      self.Configuration_counter = 0
      self.Status_LongitudinalVelocity = 0
      self.Status_LongitudinalAcceleration = 0
      self.Status_LateralAcceleration = 0
      self.Status_YawRate = 0
      self.Status_SteeringAngle = 0
      self.Status_DrivingDirection = 0
      self.Status_CharacteristicSpeed = 0
      self.Status_Radar = 0
      self.Timestamp_Nanoseconds = 0
      self.Timestamp_Seconds = 0
      self.Timestamp_SyncStatus = 0
      self.SWVersion_Major = 0
      self.SWVersion_Minor = 0
      self.SWVersion_Patch = 0
      self.Status_VoltageStatus = 0
      self.Status_TemperatureStatus = 0
      self.Status_BlockageStatus = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5fB4fH5B2I9B2I7B().pack(_x.Longitudinal, _x.Lateral, _x.Vertical, _x.Yaw, _x.Pitch, _x.PlugOrientation, _x.Length, _x.Width, _x.Height, _x.Wheelbase, _x.MaximumDistance, _x.FrequencySlot, _x.CycleTime, _x.TimeSlot, _x.HCC, _x.Powersave_Standstill, _x.SensorIPAddress_0, _x.SensorIPAddress_1, _x.Configuration_counter, _x.Status_LongitudinalVelocity, _x.Status_LongitudinalAcceleration, _x.Status_LateralAcceleration, _x.Status_YawRate, _x.Status_SteeringAngle, _x.Status_DrivingDirection, _x.Status_CharacteristicSpeed, _x.Status_Radar, _x.Timestamp_Nanoseconds, _x.Timestamp_Seconds, _x.Timestamp_SyncStatus, _x.SWVersion_Major, _x.SWVersion_Minor, _x.SWVersion_Patch, _x.Status_VoltageStatus, _x.Status_TemperatureStatus, _x.Status_BlockageStatus))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.Longitudinal, _x.Lateral, _x.Vertical, _x.Yaw, _x.Pitch, _x.PlugOrientation, _x.Length, _x.Width, _x.Height, _x.Wheelbase, _x.MaximumDistance, _x.FrequencySlot, _x.CycleTime, _x.TimeSlot, _x.HCC, _x.Powersave_Standstill, _x.SensorIPAddress_0, _x.SensorIPAddress_1, _x.Configuration_counter, _x.Status_LongitudinalVelocity, _x.Status_LongitudinalAcceleration, _x.Status_LateralAcceleration, _x.Status_YawRate, _x.Status_SteeringAngle, _x.Status_DrivingDirection, _x.Status_CharacteristicSpeed, _x.Status_Radar, _x.Timestamp_Nanoseconds, _x.Timestamp_Seconds, _x.Timestamp_SyncStatus, _x.SWVersion_Major, _x.SWVersion_Minor, _x.SWVersion_Patch, _x.Status_VoltageStatus, _x.Status_TemperatureStatus, _x.Status_BlockageStatus,) = _get_struct_5fB4fH5B2I9B2I7B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5fB4fH5B2I9B2I7B().pack(_x.Longitudinal, _x.Lateral, _x.Vertical, _x.Yaw, _x.Pitch, _x.PlugOrientation, _x.Length, _x.Width, _x.Height, _x.Wheelbase, _x.MaximumDistance, _x.FrequencySlot, _x.CycleTime, _x.TimeSlot, _x.HCC, _x.Powersave_Standstill, _x.SensorIPAddress_0, _x.SensorIPAddress_1, _x.Configuration_counter, _x.Status_LongitudinalVelocity, _x.Status_LongitudinalAcceleration, _x.Status_LateralAcceleration, _x.Status_YawRate, _x.Status_SteeringAngle, _x.Status_DrivingDirection, _x.Status_CharacteristicSpeed, _x.Status_Radar, _x.Timestamp_Nanoseconds, _x.Timestamp_Seconds, _x.Timestamp_SyncStatus, _x.SWVersion_Major, _x.SWVersion_Minor, _x.SWVersion_Patch, _x.Status_VoltageStatus, _x.Status_TemperatureStatus, _x.Status_BlockageStatus))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.Longitudinal, _x.Lateral, _x.Vertical, _x.Yaw, _x.Pitch, _x.PlugOrientation, _x.Length, _x.Width, _x.Height, _x.Wheelbase, _x.MaximumDistance, _x.FrequencySlot, _x.CycleTime, _x.TimeSlot, _x.HCC, _x.Powersave_Standstill, _x.SensorIPAddress_0, _x.SensorIPAddress_1, _x.Configuration_counter, _x.Status_LongitudinalVelocity, _x.Status_LongitudinalAcceleration, _x.Status_LateralAcceleration, _x.Status_YawRate, _x.Status_SteeringAngle, _x.Status_DrivingDirection, _x.Status_CharacteristicSpeed, _x.Status_Radar, _x.Timestamp_Nanoseconds, _x.Timestamp_Seconds, _x.Timestamp_SyncStatus, _x.SWVersion_Major, _x.SWVersion_Minor, _x.SWVersion_Patch, _x.Status_VoltageStatus, _x.Status_TemperatureStatus, _x.Status_BlockageStatus,) = _get_struct_5fB4fH5B2I9B2I7B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_5fB4fH5B2I9B2I7B = None
def _get_struct_5fB4fH5B2I9B2I7B():
    global _struct_5fB4fH5B2I9B2I7B
    if _struct_5fB4fH5B2I9B2I7B is None:
        _struct_5fB4fH5B2I9B2I7B = struct.Struct("<5fB4fH5B2I9B2I7B")
    return _struct_5fB4fH5B2I9B2I7B
